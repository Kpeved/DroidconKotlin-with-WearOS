apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'
apply plugin: 'com.squareup.sqldelight'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0-rc01"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:2.0.0-rc01"

    implementation 'androidx.appcompat:appcompat:1.0.0-rc01'
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')
//        fromPreset(presets.jvm, 'jvmApp')
        //fromPreset(preset.iosX64, 'ios') {
        //  compilations.main.outputKinds('FRAMEWORK')
        //}


        fromPreset(presets.iosX64, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
//            compilations.main.baseName("SessionizeArch")
            compilations.each {
                it.extraOpts("-linkerOpts", "-lsqlite3")
            }
        }



        /*fromPreset(presets.iosX64, 'iosX64')
        fromPreset(presets.iosArm64, 'iosArm64')

        configure([iosArm64, iosArm64]) {
            compilations.main.source(sourceSets.nativeCommonMain)
//            compilations.test.source(sourceSets.nativeTest)

            compilations.each {
                it.extraOpts("-linkerOpts", "-lsqlite3")
            }
            compilations.main.outputKinds('FRAMEWORK')
            compilations.main.extraOpts("-linkerOpts", "-lsqlite3")
            compilations.main.extraOpts('--disable', 'devirtualization')
            //compilations.main.baseName.set("SessionizeArch")
        }*/
    }

    sourceSets {

        commonMain {
            kotlin {
                srcDirs 'build/sqldelight'
            }
            dependencies {
                implementation deps.kotlin.stdlib.common
                implementation deps.sqldelight.runtime
                implementation deps.knarch.db
                implementation deps.knarch.threads
                implementation deps.knarch.threadsLivedata
                implementation deps.sqldelight.runtime
                implementation deps.sqldelight.multiplatformdriver
                implementation deps.multiplatformSettings.common
                implementation deps.atomicfu.common
                implementation deps.timber.common
            }
        }

        iosMain {
//            dependsOn commonMain

            dependencies {
                implementation deps.sqldelight.runtimeNative
                implementation deps.sqldelight.multiplatformdriverNative
                implementation deps.knarch.threadsLivedataNative
                implementation deps.multiplatformSettings.ios
                implementation deps.atomicfu.native
                implementation deps.timber.ios
            }
        }

        androidMain {
            dependencies {
                implementation deps.sqldelight.runtimeJdk
                implementation deps.sqldelight.multiplatformdriverAndroid
                implementation deps.knarch.threadsLivedataAndroid
                implementation deps.knarch.dbAndroid
                implementation deps.multiplatformSettings.android
                implementation deps.atomicfu.jdk
                implementation deps.timber.android

            }
        }
    }


}

sqldelight {
    packageName = "co.touchlab.droidcon.db"
//    sourceSet = "src/commonMain/sqldelight"
}

tasks.preBuild.dependsOn("generateSqlDelightInterface")

//noinspection GroovyAssignabilityCheck
task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = System.getenv('CONFIGURATION')?.toUpperCase() ?: 'DEBUG'

    inputs.property "mode", mode
    dependsOn kotlin.targets.ios.compilations.main.linkTaskName("FRAMEWORK", mode)

    from { kotlin.targets.ios.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode
